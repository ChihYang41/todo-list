{"version":3,"sources":["todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","delete","todo","deleteTodo","id","complete","completeTodo","this","className","isCompleted","content","onClick","Component","App","handleChange","e","setState","todoText","target","value","addTodo","state","todos","filter","map","todoData","window","localStorage","getItem","oldData","JSON","parse","length","prevProps","prevState","setItem","stringify","type","onChange","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTA+BeA,G,wBA5Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAGRC,OAAS,WAAO,IAAD,EACgB,EAAKD,MAA1BE,EADK,EACLA,MACRC,EAFa,EACCA,YACHD,EAAKE,KANC,EASnBC,SAAW,WAAO,IAAD,EACgB,EAAKL,MAA5BE,EADO,EACPA,MACRI,EAFe,EACDA,cACDJ,EAAKE,KAXD,E,sEAcT,IACAF,EAASK,KAAKP,MAAdE,KACR,OACE,wBAAIM,UAAS,4EAAuEN,EAAKO,YAAc,0BAA4B,KACjI,2BAAIP,EAAKQ,SACT,yBAAKF,UAAU,oBACb,4BAAQA,UAAU,2BAA2BG,QAASJ,KAAKN,QAA3D,gBACA,4BAAQO,UAAU,6BAA6BG,QAASJ,KAAKF,UAA7D,sB,GAtBSO,c,gOC+FJC,E,YA3Fb,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KAyBRc,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,SAAUF,EAAEG,OAAOC,SA5BJ,EAgCnBC,QAAU,WAAO,IAAD,EACc,EAAKC,MAAzBJ,EADM,EACNA,SAAUK,EADJ,EACIA,MAClB,EAAKN,SAAS,CACZM,MAAM,GAAD,mBAAMA,GAAN,CAAa,CAChBlB,GAAI,EAAKA,GACTM,QAASO,EACTR,aAAa,KAEfQ,SAAU,KAEZ,EAAKb,MA1CY,EA6CnBD,WAAa,SAACC,GACZ,EAAKY,SAAS,CACZM,MAAO,EAAKD,MAAMC,MAAMC,OAAO,SAAArB,GAAI,OAAIA,EAAKE,KAAOA,OA/CpC,EAmDnBE,aAAe,SAACF,GACd,EAAKY,SAAS,CACZM,MAAO,EAAKD,MAAMC,MAAME,IAAI,SAAAtB,GAC1B,OAAIA,EAAKE,KAAOA,EACPF,E,qVAGF,CAAP,GACKA,EADL,CAEEO,aAAcP,EAAKO,mBA1DzB,EAAKY,MAAQ,CACXC,MAAO,GACPL,SAAU,IAEZ,EAAKb,GAAK,EANO,E,iFAUjB,IAAMqB,EAAWC,OAAOC,aAAaC,QAAQ,WAC7C,GAAIH,EAAU,CACZ,IAAMI,EAAUC,KAAKC,MAAMN,GAC3BlB,KAAKS,SAAS,CACZM,MAAOO,IAETtB,KAAKH,GAAKyB,EAAQA,EAAQG,OAAS,GAAG5B,GAAK,K,yCAI5B6B,EAAWC,GACxBA,EAAUZ,QAAUf,KAAKc,MAAMC,OACjCI,OAAOC,aAAaQ,QAAQ,UAAWL,KAAKM,UAAU7B,KAAKc,MAAMC,U,+BA4C3D,IAAD,SACqBf,KAAKc,MAAzBC,EADD,EACCA,MAAOL,EADR,EACQA,SACf,OACE,yBAAKT,UAAU,WAAf,OACE,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,cAAd,aAGA,wBAAIA,UAAU,mBACZ,yBAAKA,UAAU,OACb,2BAAO6B,KAAK,OAAO7B,UAAU,kBAAkBW,MAAOF,EAAUqB,SAAW/B,KAAKO,eAChF,4BAAQN,UAAU,kCAAkCG,QAAUJ,KAAKa,SAAnE,kBAGJ,yBAAKZ,UAAU,aACZc,EAAME,IAAI,SAAAtB,GAAI,OACb,kBAAC,EAAD,CAAMqC,IAAKrC,EAAKE,GAAIF,KAAMA,EAAMC,WAAY,EAAKA,WAAYG,aAAc,EAAKA,wB,GAnF5EM,aCOE4B,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f9368abe.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  delete = () => {\n    const { todo, deleteTodo } = this.props\n    deleteTodo(todo.id)\n  }\n\n  complete = () => {\n    const { todo, completeTodo } = this.props\n    completeTodo(todo.id)\n  }\n\n  render() {\n    const { todo } = this.props\n    return (\n      <li className={`list-group-item d-flex justify-content-between align-items-center ${todo.isCompleted ? 'list-group-item-success' : ''}`}>\n        <p>{todo.content}</p>\n        <div className=\"button-container\">\n          <button className=\"todo-delete btn btn-dark\" onClick={this.delete}>刪除</button>\n          <button className=\"todo-complete btn btn-dark\" onClick={this.complete}>完成</button>\n        </div>\n      </li>\n    )\n  }\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport './bootstrap.min.css';\nimport './App.css';\nimport Todo from './todo.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      todos: [],\n      todoText: '',\n    }\n    this.id = 1;\n  }\n\n  componentDidMount() {\n    const todoData = window.localStorage.getItem('todoApp');\n    if (todoData) {\n      const oldData = JSON.parse(todoData);\n      this.setState({\n        todos: oldData\n      })\n      this.id = oldData[oldData.length - 1].id + 1;\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      window.localStorage.setItem('todoApp', JSON.stringify(this.state.todos))\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      todoText: e.target.value\n    })\n  }\n\n  addTodo = () => {\n    const { todoText, todos } = this.state\n    this.setState({\n      todos: [...todos, {\n        id: this.id,\n        content: todoText,\n        isCompleted: false\n      }],\n      todoText: ''\n    })\n    this.id++\n  }\n\n  deleteTodo = (id) => {\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    })\n  }\n\n  completeTodo = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id !== id) {\n          return todo\n        }\n\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted\n        }\n      })\n    })\n  }\n\n  render() {\n    const { todos, todoText } = this.state\n    return (\n      <div className=\"wrapper\">Ó\n        <ul className=\"list-group\">\n          <h1 className=\"todo-title\">\n            todo list\n          </h1>\n          <li className=\"input-container\">\n            <div className=\"row\">\n              <input type=\"text\" className=\"todo-input-text\" value={todoText} onChange={ this.handleChange }/>\n              <button className=\"todo-input-button btn btn-light\" onClick={ this.addTodo }>新增</button>\n            </div>\n          </li>\n          <div className=\"todo-list\">\n            {todos.map(todo => (\n              <Todo key={todo.id} todo={todo} deleteTodo={this.deleteTodo} completeTodo={this.completeTodo}/>\n              ))}\n          </div>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}